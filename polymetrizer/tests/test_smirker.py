import pytest

import polymetrizer as pet

from polymetrizer.smirker import SingleParameter


class TestSingleParameter:

    @pytest.mark.parametrize("indices, context, compressed, smirks", [
        ((0,), "all", True,
            ("[#6:1](/[#6](=[#6](/[#7](-[#1])-[#1])-[#6]"
            "(-[#1])(-[#1])-[#1])-[#1])(-[#1])(-[#1])-[#1]")),
        ((0,), "all", False,
            ("[#6AH3X4x0!r+0:1](/[#6AH1X3x0!r+0](=[#6AH0X3x0!r+0]"
            "(/[#7AH2X3x0!r+0](-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])-"
            "[#6AH3X4x0!r+0](-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])-"
            "[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])"
            "(-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0]")),
        ((1,), "all", True,
            ("[#6](/[#6:1](=[#6](/[#7](-[#1])-[#1])-[#6]"
            "(-[#1])(-[#1])-[#1])-[#1])(-[#1])(-[#1])-[#1]")),
        ((1,), "all", False,
            ("[#6AH3X4x0!r+0](/[#6AH1X3x0!r+0:1](=[#6AH0X3x0!r+0]"
            "(/[#7AH2X3x0!r+0](-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])-"
            "[#6AH3X4x0!r+0](-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])-"
            "[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])"
            "(-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0]")),
        ((0, 1), "all", True,
            ("[#6:1](/[#6:2](=[#6](/[#7](-[#1])-[#1])-[#6]"
            "(-[#1])(-[#1])-[#1])-[#1])(-[#1])(-[#1])-[#1]")),
        ((0, 1), "all", False,
            ("[#6AH3X4x0!r+0:1](/[#6AH1X3x0!r+0:2](=[#6AH0X3x0!r+0]"
            "(/[#7AH2X3x0!r+0](-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])-"
            "[#6AH3X4x0!r+0](-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])-"
            "[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])"
            "(-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0]")),
        ((1, 0), "all", True,
            ("[#6:2](/[#6:1](=[#6](/[#7](-[#1])-[#1])-[#6]"
            "(-[#1])(-[#1])-[#1])-[#1])(-[#1])(-[#1])-[#1]")),
        ((1, 0), "all", False,
            ("[#6AH3X4x0!r+0:2](/[#6AH1X3x0!r+0:1](=[#6AH0X3x0!r+0]"
            "(/[#7AH2X3x0!r+0](-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])-"
            "[#6AH3X4x0!r+0](-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])-"
            "[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0])(-[#1AH0X1x0!r+0])"
            "(-[#1AH0X1x0!r+0])-[#1AH0X1x0!r+0]")),
        
        ((0,), "minimal", True, "[#6:1]"),
        ((0,), "minimal", False, "[#6AH3X4x0!r+0:1]"),
        ((1,), "minimal", True, "[#6:1]"),
        ((1,), "minimal", False, "[#6AH1X3x0!r+0:1]"),
        ((0, 1), "minimal", True, "[#6:1]-[#6:2]"),
        ((0, 1), "minimal", False, "[#6AH3X4x0!r+0:1]-[#6AH1X3x0!r+0:2]"),
        ((1, 0), "minimal", True, "[#6:2]-[#6:1]"),
        ((1, 0), "minimal", False, "[#6AH3X4x0!r+0:2]-[#6AH1X3x0!r+0:1]"),
    ])
    def test_create_smirks(self, monomer_bta, indices, context, compressed, smirks):
        param = SingleParameter(indices, monomer_bta, {})
        created = param.create_smirks(context=context, compressed=compressed)
        assert created == smirks

    @pytest.mark.parametrize("indices, smirks", [
        ((1,), ("[#6:1](-[#1])(-[#1])-[#6](-[#6](=[#8])-[#8]-[#6]"
                "(-[#1])(-[#1])-[#6](-[#1])(-[#1])-[#6](-[#1])(-[#1])"
                "-[#6](-[#1])(-[#1])-[#1])-[#6](-[#1])(-[#1])-[#1]")),
        ((2,), ("[#6](-[#1:1])(-[#1])-[#6](-[#6](=[#8])-[#8]-[#6]"
                "(-[#1])(-[#1])-[#6](-[#1])(-[#1])-[#6](-[#1])(-[#1])"
                "-[#6](-[#1])(-[#1])-[#1])-[#6](-[#1])(-[#1])-[#1]")),
        ((1, 2), ("[#6:1](-[#1:2])(-[#1])-[#6](-[#6](=[#8])-[#8]-[#6]"
                "(-[#1])(-[#1])-[#6](-[#1])(-[#1])-[#6](-[#1])(-[#1])"
                "-[#6](-[#1])(-[#1])-[#1])-[#6](-[#1])(-[#1])-[#1]")),
        ((2, 1), ("[#6:2](-[#1:1])(-[#1])-[#6](-[#6](=[#8])-[#8]-[#6]"
                "(-[#1])(-[#1])-[#6](-[#1])(-[#1])-[#6](-[#1])(-[#1])"
                "-[#6](-[#1])(-[#1])-[#1])-[#6](-[#1])(-[#1])-[#1]")),
        ((11, 12, 13), ("[#6](-[#1])(-[#1])-[#6](-[#6](=[#8])-[#8]-[#6]"
                        "(-[#1])(-[#1])-[#6:1](-[#1:2])(-[#1:3])-[#6]"
                        "(-[#1])(-[#1])-[#6](-[#1])(-[#1])-[#1])-[#6]"
                        "(-[#1])(-[#1])-[#1]")),
    ])
    def test_create_residue_smirks(self, bma_bma, indices, smirks):
        param = SingleParameter(indices, bma_bma, {})
        created = param.create_smirks(context="residue", compressed=True)
        assert created == smirks